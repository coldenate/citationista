import { RNPlugin, declareIndexPlugin } from '@remnote/plugin-sdk';
import { citationFormats, powerupCodes } from './constants/constants';
import { setForceStop } from './services/pluginIO';
import { exportCitations } from './services/exportCitations';
import { syncCollections, syncLibrary } from './services/syncing';
import { birthZoteroRem } from './services/createLibraryRem';

async function onActivate(plugin: RNPlugin) {
	await plugin.settings.registerNumberSetting({
		id: 'zotero-user-id',
		title: 'Zotero userID',
		description: 'Find this at https://www.zotero.org/settings/keys',
	});

	await plugin.settings.registerStringSetting({
		id: 'zotero-api-key',
		title: 'Zotero API Key',
		description:
			'Find this at https://www.zotero.org/settings/keys. Make sure to enable all read/write for all features to work. But feel free to disable any you do not need.',
	});

	await plugin.settings.registerBooleanSetting({
		// TODO: implement this feature
		id: 'simple-mode',
		title: 'Simple Syncing Mode',
		description:
			'Enables Simple importing of Zotero Items. Toggling this ON will AVOID importing any metadata for a Zotero item. For ex, notes, date accessed, etc.',
		defaultValue: false,
	});

	await plugin.settings.registerDropdownSetting({
		id: 'export-citations-format',
		title: 'Export Citations Format',
		description: 'The format used when exporting citations.',
		defaultValue: 'BibTeX',
		options: citationFormats,
	});

	await plugin.settings.registerBooleanSetting({
		id: 'debug-mode',
		title: 'Debug Mode (Citationista)',
		description: 'Enables certain testing commands. Non-destructive.',
		defaultValue: false,
	});

	// export citations command (later on, (TODO:) we may want a export citations and add to zotero library command as an ext to this command)
	await plugin.app.registerCommand({
		name: 'Citationista export citations',
		description: 'Exports all citations of this Rem to clipboard...',
		id: 'export-citations',
		quickCode: 'cite',
		icon: '📑',
		keywords: 'citation, export',
		action: async () => exportCitations(plugin),
		// FIXME: I might need to await exportCitations(plugin) here (if so we will need to wrap the thingy
	});
	plugin.track(async (reactivePlugin) => {
		await isDebugMode(reactivePlugin).then(async (debugMode) => {
			if (!debugMode) await syncLibrary(plugin);
			if (debugMode) {
				plugin.app.toast('Debug Mode Enabled; Registering Debug Tools for Citationista...');
				await plugin.app.registerCommand({
					name: 'Citationista Force Library Rem Creation',
					description: 'Forces the creation of the Zotero Library Rem.',
					id: 'force-birth-zotero-rem',
					quickCode: 'birth',
					icon: '👶',
					keywords: 'zotero, force, birth',
					action: async () => {
						const rem = await birthZoteroRem(plugin);
						if (rem) {
							await plugin.window.openRem(rem);
						}
					},
				});

				await plugin.app.registerCommand({
					name: 'Citationista Force Syncing of Zotero Library',
					description: 'Forces synchronization with Zotero.',
					id: 'force-zotero-sync',
					quickCode: 'sync',
					icon: '🔁',
					keywords: 'zotero, sync',
					action: async () => {
						// await syncZoteroLibraryToRemNote(plugin); //FIXME: This is a temporary fix. We need to implement a better way to sync.
						await plugin.app.toast('🔁 Synced with Zotero!');
					},
				});

				await plugin.app.registerCommand({
					name: 'Citationista Force Quit Syncing',
					description: 'Force stop syncing with Zotero.',
					id: 'force-stop-syncing',
					icon: '🛑',
					keywords: 'zotero, stop, sync',
					action: async () => {
						await setForceStop(plugin);
					},
				});
				await plugin.app.registerCommand({
					id: 'log-values',
					name: 'citationista log values',
					description:
						'Logs remote (Zotero Cloud) and Local (This RemNote KB) Collections, Items, and other values.',
					action: async () => {
						// TODO: implement this feature
					},
				});
				await plugin.app.registerCommand({
					id: 'sync-collections',
					name: 'Sync Collections',
					description: 'Sync collections with Zotero',
					action: async () => {
						await syncCollections(reactivePlugin);
					},
				});
				await plugin.app.registerCommand({
					id: 'show-pool',
					name: 'Display Citationista Orphaned Powerup Rem',
					description: `Check for Citationista's Orphaned Rem`,
					action: async () => {
						const poolPowerup = await plugin.powerup.getPowerupByCode(
							powerupCodes.COOL_POOL
						);
						await plugin.window.openRem(poolPowerup!);
					},
				});
				await plugin.app.registerCommand({
					id: 'trash-all-plugin-footprint',
					name: 'Delete all Citationista Generated Rem',
					description: `Trash all of the plugin's footprint`,
					action: async () => {
						if (
							window.confirm(
								'This will delete EVERYTHING generated by Citationista. Are you sure you want to proceed?'
							)
						) {
							const zoteroItemPowerup = await plugin.powerup.getPowerupByCode(
								powerupCodes.ZITEM
							);
							const zoteroCollectionPowerup = await plugin.powerup.getPowerupByCode(
								powerupCodes.COLLECTION
							);
							const zoteroLibraryPowerup = await plugin.powerup.getPowerupByCode(
								'powerupCodes.ZOTERO_SYNCED_LIBRARY'
							);
							const citationistaPowerup = await plugin.powerup.getPowerupByCode(
								powerupCodes.COOL_POOL
							);
							const taggedRems = await Promise.all([
								zoteroItemPowerup?.taggedRem(),
								zoteroCollectionPowerup?.taggedRem(),
								zoteroLibraryPowerup?.taggedRem(),
								citationistaPowerup?.taggedRem(),
							]).then((results) => results.flat());
							if (taggedRems) {
								taggedRems.forEach(async (rem) => {
									await rem!.remove();
								});
							}
						}
					},
				});
				await plugin.app.registerCommand({
					id: 'delete-all-remnote-items',
					name: 'Delete all RemNote Items',
					description: 'Delete all RemNote Items',
					quickCode: 'dari',
					action: async () => {
						const zoteroItemPowerup = await plugin.powerup.getPowerupByCode(
							powerupCodes.ZITEM
						);
						const taggedRems = await zoteroItemPowerup?.taggedRem();
						if (taggedRems) {
							taggedRems.forEach(async (rem) => {
								await rem!.remove();
							});
						}
					},
				});
				await plugin.app.registerCommand({
					id: 'delete-all-remnote-collections',
					name: 'Delete all RemNote Collections',
					description: 'Delete all RemNote Collections',
					quickCode: 'darc',
					action: async () => {
						const zoteroCollectionPowerup = await plugin.powerup.getPowerupByCode(
							powerupCodes.COLLECTION
						);
						const taggedRems = await zoteroCollectionPowerup?.taggedRem();
						if (taggedRems) {
							taggedRems.forEach(async (rem) => {
								await rem!.remove();
							});
						}
					},
				});
				await plugin.app.registerCommand({
					id: 'test-make-rem-tag-with-zitem-powerup',
					name: 'Test Make Rem and Tag with Zitem Powerup',
					description: 'Test Make Rem and Tag with Zitem Powerup',
					quickCode: 'tmrtwzp',
					action: async () => {
						const currentRem = await plugin.focus.getFocusedRem();
						const rem = await plugin.rem.createRem();
						rem?.setParent(currentRem!);
						await rem!.addPowerup(powerupCodes.ZITEM);
						await rem?.setPowerupProperty(powerupCodes.ZITEM, 'fullData', [
							"I'm a test!",
						]);
						await rem
							?.getPowerupProperty(powerupCodes.ZITEM, 'fullData')
							.then((result) => {
								plugin.app.toast(result);
							});
					},
				});
			}
		});
	});
}

export async function isDebugMode(reactivePlugin: RNPlugin): Promise<boolean> {
	return await reactivePlugin.settings.getSetting('debug-mode');
}

async function onDeactivate(_: RNPlugin) {}

declareIndexPlugin(onActivate, onDeactivate);
